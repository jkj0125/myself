<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion> <!-- POM model의 버전 -->
	<parent> <!-- 프로젝트의 계층 정보 -->
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.introduce</groupId> <!-- 프로젝트를 생성하는 조직의 고유 아이디를 결정한다. 일반적으로 도메인 이름을 거꾸로 적는다. -->
	<artifactId>jeon</artifactId> <!-- 프로젝트 빌드시 파일 대표이름이다.groupID내에서 유일해야 한다. Maven을 이용하여 빌드시 artifactid-version.packaging.
	                                   위 예의 경우 빌드할 경우 jeon-0.0.1-SNAPSHOT.war 파일이 생성된다. -->
	<version>0.0.1-SNAPSHOT</version> <!-- 프로젝트의 현재 버전, 프로젝트 개발 중일 때는 SNAPSHOT을 접미사로 사용 -->
	<!-- <packaging>*</packaging> --> <!-- 패키징 유형(jar, war, ear 등) -->
	<name>jeon</name> <!-- 프로젝트, 프로젝트 이름 -->
	<description>jeon project for Spring Boot</description> <!-- 프로젝트에 대한 간략한 설명 -->
	<!-- <url>주소</url> --> <!-- 프로젝트에 대한 참고 Reference 사이트 -->
	<properties>
	<!-- 버전관리시 용이하다. ex) 해당 자바버전을 선언하고 dependencies에서 다음과 같이 활용 가능하다.
	     <version>${java.version}</version> -->
		<java.version>11</java.version>
	</properties>
	<dependencies> <!-- dependencies태그 안에는 프로젝트와 의존관계에 있는 라이브러리들을 관리한다. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build> <!-- 빌드에 사용할 플러그인 목록 -->
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
